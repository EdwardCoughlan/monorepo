name: "Maven Build"
description: "Builds a mvn service"

inputs:
  PATH: # path to the project to build
    required: true
    description: "The path of the service to built"
  SERVICE_NAME:
    required: true
    description: "The name of the service to built"
  AWS_ECR_URI:
    required: true
    description: "AWS_ECR_URI"
  AWS_CICD_ACCESS_KEY:
    required: true
    description: "AWS_CICD_ACCESS_KEY"
  AWS_CICD_SECRET_ACCESS_KEY:
    required: true
    description: "AWS_CICD_SECRET_ACCESS_KEY"

runs:
  using: "composite"

  steps:
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v32
      with:
        files: |
          ${{ inputs.PATH }}/**

    - name: Build
      id: build
      #if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        cd ${{ inputs.PATH }}
        mvn clean install -U
      shell: bash

    # - name: Generate ECR Variables
    #   id: ecr_variables
    #   if: steps.build.outcome == 'success'
    #   run: |
    #     echo "ECR_IMAGE_NAME=${{ inputs.AWS_ECR_URI }}/${{ inputs.SERVICE_NAME }}:latest" >> $GITHUB_ENV
    #   shell: bash

    - name: AWS ECR Configure
      id: ecr_configure
      if: steps.build.outcome == 'success'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.AWS_CICD_ACCESS_KEY }}
        aws-secret-access-key: ${{ inputs.AWS_CICD_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login_ecr
      if: steps.ecr_configure.outcome == 'success'
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      id: ecr_push
      if: steps.login_ecr.outcome == 'success'
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ inputs.SERVICE_NAME }}
        IMAGE_TAG: latest
      run: |
        cd ${{ inputs.PATH }}
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      shell: bash

      # aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ inputs.AWS_ECR_URI }}

    - name: Slack Notification
      if: steps.ecr_push.outcome == 'success'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: ci-cd
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: s3://github-actions/Octocat.png
        SLACK_WEBHOOK: https://hooks.slack.com/services/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
        SLACK_USERNAME: GitHub Actions
        SLACK_TITLE: Built ${{ inputs.SERVICE_NAME }}
        SLACK_FOOTER: "8=D"
