name: "Maven Build"
description: "Builds a mvn service"

inputs:
  PATH:
    required: true
    description: "The path of the service to built"
  SERVICE_NAME:
    required: true
    description: "The name of the service to built"
  AWS_ECR_URI:
    required: true
    description: "AWS_ECR_URI"
  AWS_CICD_ACCESS_KEY:
    required: true
    description: "AWS_CICD_ACCESS_KEY"
  AWS_CICD_SECRET_ACCESS_KEY:
    required: true
    description: "AWS_CICD_SECRET_ACCESS_KEY"
  SLACK_CICD_WEBHOOK:
    required: true
    description: "SLACK_CICD_WEBHOOK"
  DOCKER_IMAGE_GENERATION:
    required: false
    description: "DOCKER_IMAGE_GENERATION"
    default: "true"
  MVN_DEPLOY:
    required: false
    description: "MVN_DEPLOY"
    default: "false"
  SERVICE_VERSION:
    required: false
    description: "SERVICE_VERSION"
    default: "latest"

runs:
  using: "composite"

  steps:
    - uses: actions/setup-java@v3
      with:
        distribution: "corretto"
        java-version: "17"
        cache: "maven"

    - name: AWS Configure
      id: ecr_configure
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.AWS_CICD_ACCESS_KEY }}
        aws-secret-access-key: ${{ inputs.AWS_CICD_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Set CODEARTIFACT_AUTH_TOKEN
      id: set_codeartifact_auth_token
      run: |
        echo "CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain kjeldsen --domain-owner 040156513434 --region eu-west-1 --query authorizationToken --output text)" >> $GITHUB_ENV
      shell: bash

    - name: Build
      id: build
      run: |
        cd ${{ inputs.PATH }}
        mvn clean install -U
      shell: bash

    - name: Deploy
      id: deploy
      if: |
        steps.ecr_configure.outcome == 'success' && 
        inputs.MVN_DEPLOY  == 'true'
      run: |
        cd ${{ inputs.PATH }}
        mvn deploy -Dmaven.deploy.version=${{ inputs.SERVICE_VERSION }}
      shell: bash

    - name: Generate ECR Variables
      id: ecr_variables
      if: |
        steps.ecr_configure.outcome == 'success' && 
        inputs.DOCKER_IMAGE_GENERATION  == 'true'
      run: |
        echo "ECR_IMAGE_NAME=${{ inputs.AWS_ECR_URI }}/${{ inputs.SERVICE_NAME }}:${{ inputs.SERVICE_VERSION }}" >> $GITHUB_ENV
      shell: bash

    - name: Login to Amazon ECR
      id: login_ecr
      if: steps.ecr_variables.outcome == 'success'
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      id: ecr_push
      if: steps.login_ecr.outcome == 'success'
      run: |
        cd ${{ inputs.PATH }}
        docker build -t ${{ env.ECR_IMAGE_NAME }} .
        docker push ${{ env.ECR_IMAGE_NAME }}
      shell: bash

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      if: |
        (steps.build.outcome == 'success' && inputs.DOCKER_IMAGE_GENERATION  == 'false' && inputs.MVN_DEPLOY  == 'false') ||
        (steps.ecr_push.outcome == 'success' && inputs.DOCKER_IMAGE_GENERATION  == 'true') ||
        (steps.deploy.outcome == 'success' && inputs.MVN_DEPLOY  == 'true')
      env:
        SLACK_CHANNEL: ci-cd
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github-actions.s3.eu-west-1.amazonaws.com/Octocat.png
        SLACK_WEBHOOK: ${{ inputs.SLACK_CICD_WEBHOOK }}
        SLACK_USERNAME: GitHub Actions
        SLACK_TITLE: Built ${{ inputs.SERVICE_NAME }}
        SLACK_FOOTER: "CI successfully finished"
        MSG_MINIMAL: actions url, commit
