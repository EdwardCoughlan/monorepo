name: "Cargo Build"
description: "Builds a rust service"

inputs:
  PATH:
    required: true
    description: "The path of the service to built"
  NAME:
    required: true
    description: "The name of the service to built"
  AWS_ECR_URI:
    required: true
    description: "AWS_ECR_URI"
  AWS_CICD_ACCESS_KEY:
    required: true
    description: "AWS_CICD_ACCESS_KEY"
  AWS_CICD_SECRET_ACCESS_KEY:
    required: true
    description: "AWS_CICD_SECRET_ACCESS_KEY"
  SLACK_CICD_WEBHOOK:
    required: true
    description: "SLACK_CICD_WEBHOOK"
  SLACK_NOTIFICATION:
    description: "Activates Slack Notification"
    default: "true"
  DOCKER_IMAGE_GENERATION:
    required: false
    description: "DOCKER_IMAGE_GENERATION"
    default: "true"

runs:
  using: "composite"

  steps:
    - uses: ATiltedTree/setup-rust@v1
      with:
        rust-version: stable

    - name: AWS Configure
      id: ecr_configure
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.AWS_CICD_ACCESS_KEY }}
        aws-secret-access-key: ${{ inputs.AWS_CICD_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Build
      id: build
      run: |
        cd ${{ inputs.PATH }}/${{ inputs.NAME }}
        cargo check
      shell: bash

    - name: Generate ECR Variables
      id: ecr_variables
      if: |
        steps.ecr_configure.outcome == 'success' && 
        inputs.DOCKER_IMAGE_GENERATION  == 'true'
      run: |
        echo "ECR_IMAGE_NAME=${{ inputs.AWS_ECR_URI }}/${{ inputs.NAME }}:${{ env.VERSION }}" >> $GITHUB_ENV
      shell: bash

    - name: Login to Amazon ECR
      id: login_ecr
      if: steps.ecr_variables.outcome == 'success'
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      id: ecr_push
      if: steps.login_ecr.outcome == 'success'
      run: |
        cd ${{ inputs.PATH }}/${{ inputs.NAME }}
        docker build -t ${{ env.ECR_IMAGE_NAME }} .
        docker push ${{ env.ECR_IMAGE_NAME }}
      shell: bash

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      if: inputs.SLACK_NOTIFICATION  == 'true'
      env:
        SLACK_CHANNEL: ci-cd
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github-actions.s3.eu-west-1.amazonaws.com/Octocat.png
        SLACK_WEBHOOK: ${{ inputs.SLACK_CICD_WEBHOOK }}
        SLACK_USERNAME: GitHub Actions
        SLACK_TITLE: Built ${{ inputs.NAME }}
        SLACK_FOOTER: "CI successfully finished"
        MSG_MINIMAL: actions url, commit
