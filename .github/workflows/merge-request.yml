name: Merge Request Workflow

run-name: ${{ github.actor }} fired merge request workflow

on:
  workflow_dispatch:
  pull_request:

jobs:
  merge-request-workflow:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # we need this to ignore the project if no changes. If not, will always detect changes in all the services

      ##########
      ## LIBS ##
      ##########

      - name: security-lib pipeline
        uses: ./.github/actions/action-mvn-build
        with:
          PATH: "libs/security-lib"
          SERVICE_NAME: "security-lib"
          AWS_CICD_ACCESS_KEY: ${{ secrets.AWS_CICD_ACCESS_KEY }}
          AWS_CICD_SECRET_ACCESS_KEY: ${{ secrets.AWS_CICD_SECRET_ACCESS_KEY }}
          SLACK_CICD_WEBHOOK: ${{ secrets.SLACK_CICD_WEBHOOK }}
          DOCKER_IMAGE_GENERATION: "false"
          MVN_DEPLOY: "true"

      ##############
      ## SERVICES ##
      ##############

      - name: auth-service pipeline
        uses: ./.github/actions/action-mvn-build
        with:
          PATH: "services/auth-service"
          SERVICE_NAME: "auth-service"
          AWS_ECR_URI: ${{ secrets.AWS_ECR_URI }}
          AWS_CICD_ACCESS_KEY: ${{ secrets.AWS_CICD_ACCESS_KEY }}
          AWS_CICD_SECRET_ACCESS_KEY: ${{ secrets.AWS_CICD_SECRET_ACCESS_KEY }}
          SLACK_CICD_WEBHOOK: ${{ secrets.SLACK_CICD_WEBHOOK }}
          DOCKER_IMAGE_GENERATION: "false"

      - name: gateway-service pipeline
        uses: ./.github/actions/action-mvn-build
        with:
          PATH: "services/gateway-service"
          SERVICE_NAME: "gateway-service"
          AWS_ECR_URI: ${{ secrets.AWS_ECR_URI }}
          AWS_CICD_ACCESS_KEY: ${{ secrets.AWS_CICD_ACCESS_KEY }}
          AWS_CICD_SECRET_ACCESS_KEY: ${{ secrets.AWS_CICD_SECRET_ACCESS_KEY }}
          SLACK_CICD_WEBHOOK: ${{ secrets.SLACK_CICD_WEBHOOK }}
          DOCKER_IMAGE_GENERATION: "false"

      - name: player-service pipeline
        uses: ./.github/actions/action-mvn-build
        with:
          PATH: "services/player-service"
          SERVICE_NAME: "player-service"
          AWS_ECR_URI: ${{ secrets.AWS_ECR_URI }}
          AWS_CICD_ACCESS_KEY: ${{ secrets.AWS_CICD_ACCESS_KEY }}
          AWS_CICD_SECRET_ACCESS_KEY: ${{ secrets.AWS_CICD_SECRET_ACCESS_KEY }}
          SLACK_CICD_WEBHOOK: ${{ secrets.SLACK_CICD_WEBHOOK }}
          DOCKER_IMAGE_GENERATION: "false"

      - name: match-service pipeline
        uses: ./.github/actions/action-mvn-build
        with:
          PATH: "services/match-service"
          SERVICE_NAME: "match-service"
          AWS_ECR_URI: ${{ secrets.AWS_ECR_URI }}
          AWS_CICD_ACCESS_KEY: ${{ secrets.AWS_CICD_ACCESS_KEY }}
          AWS_CICD_SECRET_ACCESS_KEY: ${{ secrets.AWS_CICD_SECRET_ACCESS_KEY }}
          SLACK_CICD_WEBHOOK: ${{ secrets.SLACK_CICD_WEBHOOK }}
          DOCKER_IMAGE_GENERATION: "false"

      - name: kafka-service pipeline
        uses: ./.github/actions/action-cargo-build
        with:
          PATH: "services/kafka-service"
          SERVICE_NAME: "kafka-service"
          AWS_ECR_URI: ${{ secrets.AWS_ECR_URI }}
          AWS_CICD_ACCESS_KEY: ${{ secrets.AWS_CICD_ACCESS_KEY }}
          AWS_CICD_SECRET_ACCESS_KEY: ${{ secrets.AWS_CICD_SECRET_ACCESS_KEY }}
          SLACK_CICD_WEBHOOK: ${{ secrets.SLACK_CICD_WEBHOOK }}
          DOCKER_IMAGE_GENERATION: "false"

      #########
      ## FEs ##
      #########

      - name: beta-frontend pipeline
        uses: ./.github/actions/action-npm-build
        with:
          PATH: "frontends/beta-frontend"
          FE_NAME: "beta-frontend"
          AWS_ECR_URI: ${{ secrets.AWS_ECR_URI }}
          AWS_CICD_ACCESS_KEY: ${{ secrets.AWS_CICD_ACCESS_KEY }}
          AWS_CICD_SECRET_ACCESS_KEY: ${{ secrets.AWS_CICD_SECRET_ACCESS_KEY }}
          SLACK_CICD_WEBHOOK: ${{ secrets.SLACK_CICD_WEBHOOK }}
          DOCKER_IMAGE_GENERATION: "false"
