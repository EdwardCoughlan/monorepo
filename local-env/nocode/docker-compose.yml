version: '3'

services:

  ##############
  ## Local DB ##
  ##############

  local-mongodb:
    image: mongo:5.0
    container_name: local-mongodb
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: root
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s

  ##################
  ## Auth Service ##
  ##################

  auth-service:
    image: 040156513434.dkr.ecr.eu-west-1.amazonaws.com/auth-service:latest
    ports:
      - 8081:8081
    container_name: auth-service
    env_file:
      - ../config/common.env
      - ../config/auth-service.env
    depends_on:
      local-mongodb:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5

  #####################
  ## Gateway Service ##
  #####################

  gateway-service:
    image: 040156513434.dkr.ecr.eu-west-1.amazonaws.com/gateway-service:latest
    ports:
      - 8080:8080
    container_name: gateway-service
    env_file:
      - ../config/common.env
      - ../config/gateway-service.env
    depends_on:
      auth-service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5

  ####################
  ## Player Service ##
  ####################

  player-service:
    image: 040156513434.dkr.ecr.eu-west-1.amazonaws.com/player-service:latest
    ports:
      - 8082:8082
    container_name: player-service
    env_file:
      - ../config/common.env
      - ../config/player-service.env
    depends_on:
      gateway-service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5

  ###################
  ## Match Service ##
  ###################

  match-service:
    image: 040156513434.dkr.ecr.eu-west-1.amazonaws.com/match-service:latest
    ports:
      - 8083:8083
    container_name: match-service
    env_file:
      - ../config/common.env
      - ../config/match-service.env
    depends_on:
      gateway-service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5

  ###################
  ## Beta Frontend ##
  ###################

  beta-frontend:
    image: 040156513434.dkr.ecr.eu-west-1.amazonaws.com/beta-frontend:latest
    ports:
      - 3000:3000
    container_name: beta-frontend

  ###########
  ## Kafka ##
  ###########

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafka-service:
    image: 040156513434.dkr.ecr.eu-west-1.amazonaws.com/kafka-service:latest
    container_name: kafka-service
    env_file:
      - ../../config/kafka-service.env
    depends_on:
      kafka:
        condition: service_healthy
